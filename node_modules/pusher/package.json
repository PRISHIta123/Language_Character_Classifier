{
  "_args": [
    [
      {
        "raw": "pusher",
        "scope": null,
        "escapedName": "pusher",
        "name": "pusher",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "C:\\Users\\PrishitaRay\\Desktop\\react-paintapp"
    ]
  ],
  "_from": "pusher@latest",
  "_id": "pusher@2.1.2",
  "_inCache": true,
  "_location": "/pusher",
  "_nodeVersion": "8.5.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/pusher_2.1.2_1532689813514_0.004955208794098498"
  },
  "_npmUser": {
    "name": "pusherapp",
    "email": "pusherati@pusher.com"
  },
  "_npmVersion": "5.3.0",
  "_phantomChildren": {
    "ajv": "5.5.2",
    "aws-sign2": "0.7.0",
    "aws4": "1.8.0",
    "caseless": "0.12.0",
    "combined-stream": "1.0.6",
    "extend": "3.0.2",
    "forever-agent": "0.6.1",
    "form-data": "2.3.2",
    "har-schema": "2.0.0",
    "hawk": "6.0.2",
    "http-signature": "1.2.0",
    "is-typedarray": "1.0.0",
    "isstream": "0.1.2",
    "json-stringify-safe": "5.0.1",
    "mime-types": "2.1.19",
    "performance-now": "2.1.0",
    "qs": "6.5.2",
    "safe-buffer": "5.1.2",
    "stringstream": "0.0.6",
    "tunnel-agent": "0.6.0",
    "uuid": "3.3.2"
  },
  "_requested": {
    "raw": "pusher",
    "scope": null,
    "escapedName": "pusher",
    "name": "pusher",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER"
  ],
  "_resolved": "https://registry.npmjs.org/pusher/-/pusher-2.1.2.tgz",
  "_shasum": "c94bdfa540fcc200b9e329fd13ba314ed2aa775c",
  "_shrinkwrap": null,
  "_spec": "pusher",
  "_where": "C:\\Users\\PrishitaRay\\Desktop\\react-paintapp",
  "author": {
    "name": "Pusher",
    "email": "support@pusher.com"
  },
  "bugs": {
    "url": "https://github.com/pusher/pusher-rest-node/issues"
  },
  "contributors": [
    {
      "name": "fabrik42",
      "email": "fabrik42@gmail.com"
    },
    {
      "name": "Jaewoong Kim",
      "email": "jwoongkim@gmail.com"
    },
    {
      "name": "Phil Leggetter",
      "email": "phil@leggetter.co.uk"
    },
    {
      "name": "Paweł Ledwoń",
      "email": "me@ludvik.pl"
    }
  ],
  "dependencies": {
    "@types/request": "^2.47.1",
    "request": "2.85.0"
  },
  "description": "Node.js client to interact with the Pusher REST API",
  "devDependencies": {
    "expect.js": "=0.3.1",
    "express": "=3.11.0",
    "mocha": "=1.20.1",
    "nock": "^9.2.5",
    "sinon": "=1.10.2",
    "webpack": "^1.12.9"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-6g26gh+bCTHLqFYmZ0gII8hKFeNxEDaKPBv5RUyPyvYiWnFS7I2GitOaz7o+6kLZwyYXG7xfBBhaTYYaIuXwhw==",
    "shasum": "c94bdfa540fcc200b9e329fd13ba314ed2aa775c",
    "tarball": "https://registry.npmjs.org/pusher/-/pusher-2.1.2.tgz",
    "fileCount": 41,
    "unpackedSize": 127695,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJbWv2VCRA9TVsSAnZWagAAe68P/A/UMN1eQ2xQk/Uq83qN\nQ8WvcLD2el+YXdEYBbpxwjVmVWM9voW5OU8Rx9cd2h9KhYsYnHUze3dVuZPr\nGhASKgX90CIDTGPGdW/JSOysB0a/nFBSeewbMjkmqrCBZc0++XgrAGX0FnLN\nM3pA73N6Ode0FDeOgs67TBP8gXjn105Vt2kyew0TsUGvnDR423wi4pPto/Xz\nSPC1xetm4gk4RNAUDcddmOM72R+JAKOGBQ/c6+D3wrK+4jckKMOTUHYCSAHV\nmheJTMwj7ug4jem8EAGST/2P7t5lS2Yc1nmWXjTZwALzOVAg1EZp+bUtEzm+\niS7R7o4m5T6w78ECjSifxv3LAnxZLQwRsaQtXLeO11wF1prldXs/9HqhnSoV\nb9WxaxXzKR3s4gs7exby0oercksYQ7vQsqIOHNKI5pU3AlhRiAlYJ56rPeGI\nTVNNr7VrtKFDQr+TSJ5l2H4ItFBZvVXszDodoscYR67X9IjXX6urMVvxNJJE\np2vl6Ej9+KyMW/qBIM9sC5vDR8e4STamBcVbIowp0I2l7BcUycrmOc37byTQ\ndg78NFWCUelmCXurAiVgZ5pMrq2vXZ99FJlSThppjacTOipD5Rs1cGX7AkKw\nnRqWDph1RMuIISl1xgF1D7WnJZtKSSFak0pNH3QQavs1l+uUp0Nq5EOfsoMw\nxYHK\r\n=YTBg\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "engines": {
    "node": ">= 4.0.0"
  },
  "gitHead": "aa80d17293acfa2df153bc5079dc93512ae0d884",
  "homepage": "https://github.com/pusher/pusher-rest-node#readme",
  "keywords": [
    "pusher",
    "websockets",
    "realtime"
  ],
  "license": "MIT",
  "main": "lib/pusher",
  "maintainers": [
    {
      "name": "alexandru.topliceanu",
      "email": "alexandru.topliceanu@gmail.com"
    },
    {
      "name": "pusherapp",
      "email": "pusherati@pusher.com"
    },
    {
      "name": "zimbatm",
      "email": "zimbatm@zimbatm.com"
    }
  ],
  "name": "pusher",
  "optionalDependencies": {},
  "readme": "# Pusher Node.js REST library\n\nIn order to use this library, you need to have an account on <http://pusher.com>. After registering, you will need the application credentials for your app.\n\n## Installation\n\nYou need to be running at least Node.js 4 to use this library.\n\n```\n$ npm install pusher\n```\n\n### Parse Cloud\n\nIn order to use the library in a Parse Cloud module, install the module into your `cloud/modules` path:\n\n    $ npm install pusher --prefix cloud/modules\n\nThen to build the file bundle for Parse Cloud:\n\n    $ cd cloud/modules/pusher\n    $ npm run parse-build\n\nTo import `Pusher`:\n\n```js\nvar Pusher = require('cloud/modules/node_modules/pusher/parse');\n```\n\n## Importing\n\nIt's possible to use pusher-http-node with typescript or javascript.\n\n```javascript\nconst Pusher = require('pusher');\n```\n\n```typescript\nimport * as Pusher from 'pusher';\n```\n\nAll external APIs should have types in index.d.ts.\n\n## Configuration\n\nThere are 3 ways to configure the client. First one is just using the Pusher constructor:\n\n```javascript\nvar Pusher = require('pusher');\n\nvar pusher = new Pusher({\n  appId: 'APP_ID',\n  key: 'APP_KEY',\n  secret: 'SECRET_KEY',\n  encrypted: ENCRYPTED, // optional, defaults to false\n  cluster: 'CLUSTER', // if `host` is present, it will override the `cluster` option.\n  host: 'HOST', // optional, defaults to api.pusherapp.com\n  port: PORT, // optional, defaults to 80 for unencrypted and 443 for encrypted\n});\n```\n\nFor specific clusters, you can use the `forCluster` function. This is the same as using the `cluster` option in the constructor.\n\n```javascript\nvar Pusher = require('pusher');\n\nvar pusher = Pusher.forCluster(\"CLUSTER\", {\n  appId: 'APP_ID',\n  key: 'APP_KEY',\n  secret: 'SECRET_KEY',\n  encrypted: ENCRYPTED, // optional, defaults to false\n  port: PORT, // optional, defaults to 80 for unencrypted and 443 for encrypted\n});\n```\n\nYou can also specify auth and endpoint options by passing an URL:\n\n```javascript\nvar Pusher = require('pusher');\n\nvar pusher = Pusher.forURL(\"SCHEME://APP_KEY:SECRET_KEY@HOST:PORT/apps/APP_ID\");\n```\n\nYou can pass the optional second argument with options, as in `forCluster` function.\n\nThis is useful for example on Heroku, which sets the PUSHER_URL environment\nvariable to such URL, if you have the Pusher addon installed.\n\n#### Additional options\n\nThere are a few additional options that can be used in all above methods:\n\n```javascript\nvar Pusher = require('pusher');\n\nvar pusher = new Pusher({\n  // you can set other options in any of the 3 ways described above\n  proxy: 'HTTP_PROXY_URL', // optional, URL to proxy the requests through\n  timeout: TIMEOUT, // optional, timeout for all requests in milliseconds\n  keepAlive: KEEP_ALIVE // optional, enables keep-alive, defaults to false\n});\n```\n\n## Usage\n\n### Callbacks and error handling\n\n#### API requests\n\nAsynchronous methods on the Pusher class (`trigger`, `get` and `post`) take an optional callback as the last argument. After performing the request, the callback is called with three arguments:\n\n- error - if the request can't be performed or returns an error code, error will contain details, otherwise it will be null\n- request - the request object\n- response - the response object - can be undefined if response was not received\n\nAll operational errors are wrapped into a Pusher.RequestError object.\n\n#### WebHooks\n\nIn case accessing data for invalid WebHooks, an Pusher.WebHookError exception will be thrown from the called method. It is recommended to validate the WebHook before interpreting it.\n\n### Publishing events\n\nTo send an event to one or more channels use the trigger function. Channel names can contain only characters which are alphanumeric, '_' or '-' and have to be at most 200 characters long. Event name can be at most 200 characters long too.\n\n#### Single channel\n\n```javascript\npusher.trigger('channel-1', 'test_event', { message: \"hello world\" });\n```\n\n#### Multiple channels\n\nTo trigger an event on multiple channels:\n\n```javascript\npusher.trigger([ 'channel-1', 'channel-2' ], 'test_event', { message: \"hello world\" });\n```\n\n#### Batch events\n\nIf you wish to send multiple events in a single HTTP request, you can pass an array of events to `pusher.triggerBatch`. You can send up to a maximum of 10 events at once.\n\n```javascript\nvar events = [{\n  channel: \"channel-1\",\n  name: \"test-event-1\",\n  data: {message: \"hello world\"}\n},\n{\n  channel: \"channel-2\",\n  name: \"test-event-2\",\n  data: {message: \"hello another world\"}\n}];\n\npusher.triggerBatch(events);\n```\n\nYou can trigger an event to at most 10 channels at once. Passing more than 10 channels will cause an exception to be thrown.\n\n### Excluding event recipients\n\nIn order to avoid the client that triggered the event from also receiving it, the `trigger` function takes an optional `socketId` parameter. For more informaiton see: <http://pusher.com/docs/publisher_api_guide/publisher_excluding_recipients>.\n\n```javascript\nvar socketId = '1302.1081607';\npusher.trigger(channel, event, data, socketId);\n```\n\n### Push Notifications [BETA]\n\nPusher now allows sending native notifications to iOS and Android devices. Check out the [documentation](https://pusher.com/docs/push_notifications) for information on how to set up push notifications on Android and iOS. There is no additional setup required to use it with this library. It works out of the box wit the same Pusher instance. All you need are the same pusher credentials.\n\n#### Sending native pushes\n\nThe native notifications Server API is hosted at `nativepush-cluster1.pusher.com` and only accepts https requests.\n\nYou can send pushes by using the `notify` method, either globally or on the instance. The method takes three parameters:\n\n- `interests`: An Array of strings which represents the interests your devices are subscribed to. These are akin to channels in the DDN with less of an epehemeral nature. Note that currently, you can only send to, at most, _ten_ interests.\n- `data`: The content of the notification represented by a Hash. You must supply either the `gcm` or `apns` key. For a detailed list of the acceptable keys, take a look at the [docs](https://pusher.com/docs/push_notifications#payload).\n- `callback`: A callback function which is passed three arguments: a (possibly null) error, a request object, and a response object.\n\nExample:\n\n```js\nvar data = {\n  apns: {\n    priority: 5,\n    aps: {\n      alert: {\n        body: 'tada'\n      }\n    }\n  }\n}\n\npusher.notify([\"my-favourite-interest\"], data, function(error, req, res) {\n  console.log(error, req, res);\n})\n```\n\n#### Errors\n\nPush notification requests, once submitted to the service are executed asynchronously. To make reporting errors easier, you can supply a `webhook_url` field in the body of the request. This will be used by the service to send a webhook to the supplied URL if there are errors.\n\nFor example:\n\n```js\nvar data = {\n  \"apns\": {\n    \"aps\": {\n      \"alert\": {\n        \"body\": \"hello\"\n      }\n    }\n  },\n  'gcm': {\n    'notification': {\n      \"title\": \"hello\",\n      \"icon\": \"icon\"\n    }\n  },\n  \"webhook_url\": \"http://yolo.com\"\n}\n```\n\n**NOTE:** This is currently a BETA feature and there might be minor bugs and issues. Changes to the API will be kept to a minimum, but changes are expected. If you come across any bugs or issues, please do get in touch via [support](support@pusher.com) or create an issue here.\n\n### Authenticating private channels\n\nTo authorise your users to access private channels on Pusher, you can use the `authenticate` function:\n\n```javascript\nvar auth = pusher.authenticate(socketId, channel);\n```\n\nFor more information see: <http://pusher.com/docs/authenticating_users>\n\n### Authenticating presence channels\n\nUsing presence channels is similar to private channels, but you can specify extra data to identify that particular user:\n\n```javascript\nvar channelData = {\n\tuser_id: 'unique_user_id',\n\tuser_info: {\n\t  name: 'Phil Leggetter'\n\t  twitter_id: '@leggetter'\n\t}\n};\nvar auth = pusher.authenticate(socketId, channel, channelData);\n```\n\nThe `auth` is then returned to the caller as JSON.\n\nFor more information see: <http://pusher.com/docs/authenticating_users>\n\n### Application state\n\nIt's possible to query the state of the application using the `pusher.get` function.\n\n```javascript\npusher.get({ path: path, params: params }, callback);\n```\n\nThe `path` property identifies the resource that the request should be made to and the `params` property should be a map of additional query string key and value pairs.\n\nParams can't include following keys:\n- auth_key\n- auth_timestamp\n- auth_version\n- auth_signature\n- body_md5\n\nThe following example provides the signature of the callback and an example of parsing the result:\n```javascript\npusher.get({ path: '/channels', params: {} }, function(error, request, response) {\n\tif (response.statusCode === 200) {\n\t\tvar result = JSON.parse(response.body);\n\t\tvar channelsInfo = result.channels;\n\t}\n});\n```\n\n#### Get the list of channels in an application\n\n```javascript\npusher.get({ path: '/channels', params: params }, callback);\n```\n\nInformation on the optional `params` and the structure of the returned JSON is defined in the [REST API reference](http://pusher.com/docs/rest_api#method-get-channels).\n\n#### Get the state of a channel\n\n```javascript\npusher.get({ path: '/channels/[channel_name]', params: params }, callback);\n```\n\nInformation on the optional `params` option property and the structure of the returned JSON is defined in the [REST API reference](http://pusher.com/docs/rest_api#method-get-channel).\n\n#### Get the list of users in a presence channel\n\n```javascript\npusher.get({ path: '/channels/[channel_name]/users' }, callback);\n```\n\nThe `channel_name` in the path must be a [presence channel](http://pusher.com/docs/presence). The structure of the returned JSON is defined in the [REST API reference](http://pusher.com/docs/rest_api#method-get-users).\n\n### WebHooks\n\nThe library provides a simple helper for WebHooks, which can be accessed via Pusher instances:\n\n```javascript\nvar webhook = pusher.webhook(request);\n```\n\nRequests must expose following fields:\n- headers - object with request headers indexed by lowercase header names\n- rawBody - string with the WebHook request body\n\nSince neither Node.js nor express provide the body in the request, your application needs to read it and assign to the request object. See examples/webhook_endpoint.js for a simple webhook endpoint implementation using the express framework.\n\nHeaders object must contain following headers:\n- x-pusher-key - application key, sent by Pusher\n- x-pusher-signature - WebHook signature, generated by Pusher\n- content-type - must be set to application/json, what Pusher does\n\nAfter instantiating the WebHook object, you can use its following methods:\n\n#### isValid\n\nValidates the content type, body format and signature of the WebHook and returns a boolean. Your application should validate incoming webhooks, otherwise they could be faked.\n\nAccepts an optional parameter containing additional application tokens (useful e.g. during migrations):\n\n```javascript\nvar webhook = pusher.webhook(request);\n// will check only the key and secret assigned to the pusher object:\nwebhook.isValid();\n// will also check two additional tokens:\nwebhook.isValid([{ key: \"x1\", secret: \"y1\" }, { key: \"x2\", secret: \"y2\" }]);\n```\n\n#### getData\n\nReturns the parsed WebHook body. Throws a Pusher.WebHookError if the WebHook is invalid, so please check the `isValid` result before accessing the data.\n\n```javascript\n// will return an object with the WebHook data\nwebhook.getData();\n```\n\nPlease read [the WebHooks documentation](http://pusher.com/docs/webhooks) to find out what fields are included in the body.\n\n#### getEvents\n\nReturns events included in the WebHook as an array. Throws a Pusher.WebHookError if the WebHook is invalid, so please check the `isValid` result before accessing the events.\n\n```javascript\n// will return an array with the events\nwebhook.getEvents();\n```\n\n#### getTime\n\nReturns the Date object for the time when the WebHook was sent from Pusher. Throws a Pusher.WebHookError if the WebHook is invalid, so please check the `isValid` result before accessing the time.\n\n```javascript\n// will return a Date object\nwebhook.getTime();\n```\n\n### Generating REST API signatures\n\nIf you wanted to send the REST API requests manually (e.g. using a different HTTP client), you can use the `createSignedQueryString` method to generate the whole request query string that includes the auth keys and your parameters.\n\n```javascript\npusher.createSignedQueryString({\n  method: \"POST\",                                              // the HTTP request method\n  path: \"/apps/3/events\",                                      // the HTTP request path\n  body: '{\"name\":\"foo\",\"channel\":\"donuts\",\"data\":\"2-for-1\"}',  // optional, the HTTP request body\n  params: {},                                                  // optional, the query params\n});\n```\n\nThe `params` object can't contain following keys, as they are used to sign the request:\n\n- auth_key\n- auth_timestamp\n- auth_version\n- auth_signature\n- body_md5\n\n\n\n\n## Testing\n\nThe tests run using [Mocha](http://mochajs.org/). Make sure\nyou've got all required modules installed:\n\n    npm install\n\n### Running the local test suite\n\nYou can run local integration tests without setting up a Pusher app:\n\n    node_modules/.bin/mocha tests/integration/**/*.js\n\n### Running the complete test suite\n\nIn order to run the full test suite, first you need a Pusher app. When starting\nmocha, you need to set the PUSHER_URL environment variable to contain your\napp credentials, like following:\n\n    `PUSHER_URL='http://KEY:SECRET@api.pusherapp.com/apps/APP_ID' node_modules/.bin/mocha $(find tests)`\n\n## Credits\n\nThis library is based on the work of:\n* Christian Bäuerlein and his library pusher.\n* Jaewoong Kim and the node-pusher library.\n\n## License\n\nThis code is free to use under the terms of the MIT license.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/pusher/pusher-rest-node.git"
  },
  "scripts": {
    "parse-build": "echo 'Creating build for Parse Cloud.' && webpack --config=./parse.webpack.js",
    "prepublish": "npm run parse-build",
    "test": "mocha tests/integration/**/*.js"
  },
  "typings": "index.d.ts",
  "version": "2.1.2"
}
